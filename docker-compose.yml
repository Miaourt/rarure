services:
  _build_mastodon:
    image: mastodon_rarure
    command: ['echo', 'mastodon build completed']
    build:
      context: ./src/mastodon
      args:
        - MASTODON_VERSION=v3.5.3

  db:
    container_name: mastodon-db
    restart: unless-stopped
    image: postgres:15beta3-alpine
    security_opt:
      - no-new-privileges:true
    environment:
      - 'PGDATA=/var/lib/postgresql/data/pgdata'
    env_file: env.production
    shm_size: 256mb
    networks:
      - internal_network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB']
    volumes:
      - ../persistent-data/mastodon/postgres:/var/lib/postgresql/data/pgdata
      - ../persistent-data/mastodon/postgres-srv:/srv

  redis:
    container_name: mastodon-redis
    restart: unless-stopped
    image: redis:7-alpine
    security_opt:
      - no-new-privileges:true
    networks:
      - internal_network
    volumes:
      - ../persistent-data/mastodon/redis:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]

  web:
    container_name: mastodon-web
    restart: unless-stopped
    image: mastodon_rarure
    security_opt:
      - no-new-privileges:true
    env_file: env.production
    command: bash -c "rm -f /mastodon/tmp/pids/server.pid; bundle exec rails s -p 3000"
    networks:
      - external_network
      - internal_network
    healthcheck:
      test: ['CMD-SHELL', 'wget -q --spider --proxy=off localhost:3000/health || exit 1']
    ports:
      - '127.0.0.1:3000:3000'
    depends_on:
      - db
      - redis
      - _build_mastodon
    volumes:
      - ../persistent-data/mastodon/emojis:/emojis
    #   - ./public/system:/mastodon/public/system

  streaming:
    container_name: mastodon-streaming
    restart: unless-stopped
    image: mastodon_rarure
    security_opt:
      - no-new-privileges:true
    env_file: env.production
    command: node ./streaming
    networks:
      - external_network
      - internal_network
    healthcheck:
      test: ['CMD-SHELL', 'wget -q --spider --proxy=off localhost:4000/api/v1/streaming/health || exit 1']
    ports:
      - '127.0.0.1:4000:4000'
    depends_on:
      - db
      - redis
      - _build_mastodon

  sidekiq:
    container_name: mastodon-sidekiq
    restart: unless-stopped
    image: mastodon_rarure
    security_opt:
      - no-new-privileges:true
    env_file: env.production
    command: bundle exec sidekiq -c 10
    networks:
      - external_network
      - internal_network
    healthcheck:
      test: ['CMD-SHELL', "ps aux | grep '[s]idekiq\ 6' || false"]
    depends_on:
      - db
      - redis
      - _build_mastodon
    # volumes:
    #   - ./public/system:/mastodon/public/system

  proxy:
    container_name: mastodon-nginx
    restart: unless-stopped
    build:
      context: ./src/proxy
      args:
        - NGINX_VERSION=1.23-alpine
    security_opt:
      - no-new-privileges:true
    networks:
      - external_network
    healthcheck:
      test: ['CMD', 'curl', '--fail', 'http://127.0.0.1']
    ports:
      - 127.0.0.1:8004:8080
    depends_on:
      - web
      - streaming
      - sidekiq
    volumes:
      - ../persistent-data/mastodon/proxy:/var/cache/nginx

networks:
  external_network:
  internal_network:
    internal: true

## Some useful commands
## First setup
# docker compose run --rm -e RAILS_ENV=production web rails db:setup
#
# docker compose run --rm web tootctl accounts modify Miaourt --role admin
#
## Backup Database
# docker compose exec postgres pg_dump -Fc -U mastodon mastodon | zstd > backup.dump.zst
#
## Restore Database
# pg_restore -U mastodon -d mastodon -j 2 /dump/dump.sql
#
## Migrate Database
# docker compose run --rm -e DB_PORT=5432 web rails db:migrate
#
## Grab all users emails for mailing list
# docker compose run web rails r "puts *User.confirmed.pluck(:email)"
#
## Emojis
# tootctl emoji import /emojis/Meowmoji.tar.gz --category Meowmojis
#
## Prune cached media
# docker compose exec -e RAILS_ENV=production web tootctl media remove --verbose
#
## Prune cached thumbnails
# docker compose exec -e RAILS_ENV=production web tootctl preview_cards remove --days 15 --verbose
#
## Remove orphaned media
# docker compose exec -e RAILS_ENV=production web tootctl media remove-orphans --verbose
